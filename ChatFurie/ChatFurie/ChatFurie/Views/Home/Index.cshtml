@{
    ViewData["Title"] = "Home Page";
}
@{
    int userID = Convert.ToInt32(User.Claims.ToList()[1].Value);
    ChatContext chatContext = new ChatContext();
    var user = chatContext.Users.Find(userID);
}

<style>
    .choice-modal {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 5% 10% 5% 10%;
        font-size: 14pt;
    }

    .modal-content {
        padding: 20px;
    }

    .call-input-body {
        display: flex;
        flex-direction: row;
        padding: 5px 5px 5px 5px;
    }

        .call-input-body > span {
            padding-left: 20px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
</style>

<div class="modal fade" id="modalWindow" tabindex="-1" role="dialog" aria-labelledby="ModalWindow" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div id="modalContent" class="modal-content">
        </div>
    </div>
</div>

<div class="modal fade" id="modalWindow-AddUser" tabindex="-1" role="dialog" aria-labelledby="ModalWindow" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div id="modalContent-tmp" class="modal-content">
            <div class="search">
                <input id="search-input-add-conversation" type="text" />
            </div>
            <div id="modalContent-AddUser"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalWindow-CallInput" tabindex="-1" role="dialog" aria-labelledby="ModalWindow">
    <div class="modal-dialog" role="document">
        <div id="modalContent-tmp" class="modal-content">
            <div id="call-input-body" class="call-input-body">
                <span>
                    <img id="startCall-modal" src="~/images/call.png" class="img40 hover-mouse" />
                </span>
                <span>
                    <img id="declineCall-modal" src="~/images/call-end.png" class="img40 hover-mouse" />
                </span>
                <span id="call-input-name"></span>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="choiceModal" tabindex="-1" role="dialog" aria-labelledby="choiceModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content choice-modal">
            Are you sure?
            <div class="modal-footer">
                <input class="btn btn-success" value="Yes" id="choiceModal-Yes" />
                <input class="btn btn-danger" data-dismiss="modal" value="No" id="choiceModal-No" />
            </div>
        </div>
    </div>
</div>

<div class="f-column column">
    <div id="userSettings" class="user-info">
        <img src="~/images/DefaultUserImg.png" class="img40" />
        <span>@Html.StringLengthValidate(user.Login)</span>
        <img src="~/images/condition-on.jpg" class="img10" />
    </div>
    <div class="search">
        <input id="search-input" type="text" />
    </div>
    <div class="tabs-line">
        <span name="list-output" class="tab-header tab-header-active">Conversations</span>
        <span name="Notifications" class="tab-header">
            <span>
                <span style="display:none" class="tab-header-img"></span>
            </span>
            Notifications
        </span>
    </div>
    <div id="list-output" class="list-output">
    </div>
    <div id="Notifications" class="list-output" style="display:none">
    </div>
</div>
<div id="s-column" class="s-column column">
    <div style="height:100%; display: flex; flex-direction:column; justify-content:center;">
        <img style="width:100%" src="~/images/startImage.jpg" />
    </div>
</div>


<div>
    <audio id="chatAudio"></audio>
</div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.0.1/js/toastr.js"></script>
<script>

    toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": false,
        "positionClass": "toast-top-right",
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": 300,
        "hideDuration": 1000,
        "timeOut": 5000,
        "extendedTimeOut": 1000,
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }

    // On Start page
    $(function () {

        var modalWindow = $("#modalWindow");
        var modalWindowContent = $("#modalContent");

        var modalChoice = $('#choiceModal');
        var modalChoiceYes = $('#choiceModal-Yes');
        var modalChoiceNo = $('#choiceModal-No');

        var modalAddUser = $('#modalWindow-AddUser');
        var modalAddUserContent = $('#modalContent-AddUser');

        var modalInputCall = $('#modalWindow-CallInput');
        var modalInputCallcontent = $('#call-input-name');

        var messageBox = null;

        /* */

        var isInputCall = false;
        var inputCallConversation;

        var videoChatBlock;
        var visionBlock;
        var videoCanvasBlock;

        var openConvesation;
        var activeDialogConversation;
        var isActiveDialog = false;

        var countUsersInActive;

        var theRecorder;
        var videoStream;

        /* */

        $(modalWindow).on("hidden.bs.modal", function () { isModalOpen = false; });
        $(modalAddUser).on("hidden.bs.modal", function () {
            isModalOpen = false;
            $('#search-input-add-conversation').val("");
        });
        $(modalChoice).on("hidden.bs.modal", function () { isModalOpen = false; });
        $(modalInputCall).on("hidden.bs.modal", function () {
            isInputCall = false;
            if (!isActiveDialog)
                DeclineCalling();
        });

        var isModalOpen = false;
       

        function createMessage(author, id, dateMsg, userMsg, contentMsg) {
            var newMsg = document.createElement("div");
            $(newMsg).attr('class', 'message-box-message' + (author === @userID ? '' : ' unread-message'));
            $(newMsg).attr('id', id);
            var date = document.createElement("div");
            $(date).attr("class", 'date');
            $(date).html(dateMsg);
            var user = document.createElement('div');
            $(user).attr("class", 'user');
            $(user).html(userMsg);
            var content = document.createElement('div');
            $(content).attr("class", 'content');
            $(content).html(contentMsg);
            $(newMsg).append(date);
            $(newMsg).append(user);
            $(newMsg).append(content);
            return newMsg;
        }

        var socket;

        function InitSocket() {
             var protocol = location.protocol === "https:" ? "wss:" : "ws:";
             var wsUri = protocol + "//" + window.location.host;
             socket = new WebSocket(wsUri);
             socket.onopen = e => {
               var jsonStart = '{"user":"@userID"}';
               socket.send(jsonStart);
               console.log("socket opened", e);
             };

            socket.onclose = function (e) {
                console.log("socket closed", e);
            };

            socket.onmessage = function (e) {
            var data = JSON.parse(e.data);
            switch (data["type"]) {
                case "messanger":
                    if (messageBox !== null) {
                        if (data["conversation"] === $(messageBox).attr('name')) {
                            var newMsg = createMessage(data['author'], data["id"], data["date"], data["user"], data["content"]);
                            $(messageBox).append(newMsg);
                            messageBox.scrollTop = messageBox.scrollHeight;
                            $(messageBox).scrollTop($(messageBox).prop('scrollHeight'));
                        }
                    }
                    break;
                case "notification":{
                    switch (data["method"]) {
                        case @((int)SocketHandler.NotificationType.Common):
                            LoadNotifications();
                            break;
                        case @((int)SocketHandler.NotificationType.Conversation):
                            LoadConversations();
                            break;
                        case @((int)SocketHandler.NotificationType.CallStart):
                            InputCalling(data);
                            break;
                        case @((int)SocketHandler.NotificationType.Stop):
                            StopCalling();
                            StopStream();
                            break;
                        case @((int)SocketHandler.NotificationType.UserIdReady):
                            VideoChatStart(data["conversation"]);
                            break;
                        }
                    }
                    break;
                case "video-message":
                    {
                        var user = data["user"];
                        var video = CreateCanvasForUser(user);
                        video.src = data["data"];
                    }
                    break;
                }
            };

            socket.onerror = function (e) {
                console.error(e.data);
                toastr["error"](e.data);
            };
        }

        InitSocket();


        /* */
        function CreateCanvasForUser(userId) {
            var video = document.getElementById("video" + userId);
            var sizeX = $(videoChatBlock).width();
            if (!$(video).length) {
                video = document.createElement("img");
                video.id = "video" + userId;
                video.width = sizeX / 3;
                video.height = sizeX / 4;
                $(videoChatBlock).append(video);
            }
            return video;
        }


        function CreateVideoForUser(userId) {
            var video = $("#video" + userId);
            var sizeX = $(videoChatBlock).width();
            var sizeY = $(videoChatBlock).height();
            if (!video.length) {
                video = document.createElement("video");
                video.setAttribute("autoplay", "true");
                video.setAttribute("id", "video" + userId);
                video.width = sizeX / 3;
                $(videoChatBlock).append(video);
            }
            return video;
        }

        $('#declineCall-modal').click(function () {
            DeclineCalling();
        });

        $('#startCall-modal').click(function () {
            AcceptCalling();
        });

        function StopStream() {
            if (videoStream)
                for (var i = 0; i < videoStream.getTracks().length; i++)
                    videoStream.getTracks()[i].stop();
            videoStream = null;
            clearInterval(theRecorder);
            isActiveDialog = false;
        }

        function StopCalling(isStarter = false) {
            isInputCall = false;
            $(modalInputCall).modal("hide");
            if ($(visionBlock).css("display") !== "none") {
                SwitchVideo();
            }
            if ($("#endCalling-cont").css("display") !== "none") {
                SwitchMode();
            }
            $(videoChatBlock).html("");
        }

        function InputCalling(data) {
            if (isInputCall || isActiveDialog) {
                var json = new Object();
                json["conversation"] = data["conversation"];
                json["user"] = @userID;
                json["type"] = "notification";
                json["method"] = @((int)SocketHandler.NotificationType.Stop);
                socket.send(JSON.stringify(json).toString());
                return;
            }
            isInputCall = true;
            inputCallConversation = data["conversation"];
            $(modalInputCallcontent).html(data["name"]);
            $(modalInputCall).modal("show");
            isModalOpen = true;
        }

        function VideoChatStart(conversation) {
            if ($(visionBlock).css("display") !== "none") {
                SwitchVideo();
            }
            if (!$("#video" +@userID).length) {
                StartStream();
            }
            isActiveDialog = true;
            activeDialogConversation = conversation;
        }

        function StartCalling() {
            var json = new Object();
            json["conversation"] = openConvesation;
            json["type"] = "notification";
            json["method"] = @((int)SocketHandler.NotificationType.CallStart);
            socket.send(JSON.stringify(json).toString());
        }


        var frameCompressWidth = 200;
        var frameCompressHeight = 150;

        function GetCurrentFrame(video) {
            var canvas = document.createElement("canvas");
            canvas.height = frameCompressHeight;
            canvas.width = frameCompressWidth;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(video, 0, 0, frameCompressWidth, frameCompressHeight);
            return canvas.toDataURL();
        }

        function b64toBlob(b64Data, contentType, sliceSize) {
            contentType = contentType || '';
            sliceSize = sliceSize || 512;

            var byteCharacters = atob(b64Data);
            var byteArrays = [];

            for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                var slice = byteCharacters.slice(offset, offset + sliceSize);

                var byteNumbers = new Array(slice.length);
                for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }

                var byteArray = new Uint8Array(byteNumbers);

                byteArrays.push(byteArray);
            }

            var blob = new Blob(byteArrays, { type: contentType });
            return blob;
        }

        function StartStream() {
            var video = CreateVideoForUser(@userID);
            var jsonPattern = new Object();
            jsonPattern["type"] = "video-message";
            jsonPattern["user"] = @userID;
            jsonPattern["conversation"] = activeDialogConversation;
            jsonPattern["method"] = 0;
            if (navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: true })
                    .then(function (stream) {
                        videoStream = stream;
                        video.srcObject = videoStream;

                        theRecorder = setInterval(function () {
                            var frame = GetCurrentFrame(video);
                            jsonPattern["data"] = frame;
                            socket.send(JSON.stringify(jsonPattern).toString());

                            //var a = document.createElement("a");
                            //document.body.appendChild(a);
                            //a.style = "display: none";
                            //a.href = frame;
                            //a.download = 'test.png';
                            //a.click();
                        }, 100);
                    })
                    .catch(function (err) {
                        alert("Something went wrong! " + err);
                    });
            }

        }

        function AcceptCalling() {
            var json = new Object();
            json["type"] = "notification";
            json["method"] = @((int)SocketHandler.NotificationType.CallAccess);
            json["user"] = @userID;
            json["conversation"] = inputCallConversation;
            socket.send(JSON.stringify(json).toString());
            OpenConversation(inputCallConversation, true);
        }

        function DeclineCalling(isAdmin = false) {
            var json = new Object();
            json["conversation"] = isAdmin ? openConvesation : inputCallConversation;
            json["user"] = @userID;
            json["type"] = "notification";
            json["method"] = @((int)SocketHandler.NotificationType.Stop);
            socket.send(JSON.stringify(json).toString());
            StopCalling();
        }

        function ToggleVisibility(obj, convert = "flex") {
            if ($(obj).css("display") === "none") {
                $(obj).css("display", convert);
            } else {
                $(obj).css("display", "none");
            }
        }

        function SwitchVideo() {
            ToggleVisibility(visionBlock);
            ToggleVisibility(videoChatBlock);
        }

        function SwitchMode() {
            ToggleVisibility($("#startCalling-cont"));
            ToggleVisibility($("#endCalling-cont"));
        }

        /* */

        function SendNotification(userId, notifType) {
            var json = new Object();
            json["type"] = 'notification';
            json["method"] = notifType;
            json["userTo"] = userId;
            socket.send(JSON.stringify(json).toString());
        }

        var isActive;

        window.onfocus = function () {
            isActive = true;
        };

        window.onblur = function () {
            isActive = false;
        };

        setInterval(function () {
            if (isActive) {
                $('.message-box-message.unread-message').each(function (i,obj) {
                    $(obj).attr('class', 'message-box-message');
                    AjaxPost({ message: $(obj).attr("id"), user: "@userID" }, "@Url.Action("ReadMessage", "Home")", function (e) {
                    });
                });
            }
        },1000);

        $('#userSettings').click(function () {
            AjaxPost({ user: "@userID" }, "@Url.Action("LoadUserSettings", "Home")", function (e) {
                $('#s-column').html(e);
                $('#saveUserSettings').click(function (e) {
                    $('#userSettingsForm').submit();
                });
            });
        });

        function GetStartPage() {
            $("#s-column").html('<img style="width:100%" src="~/images/startImage.jpg" />');
        }

        function LoadConversations() {
            AjaxPost({ "user": "@userID" }, "@Url.Action("GetConversations","Home")", function (e) {
                $("#list-output").html(e);
                $(".conversation").click(function () {
                    OpenConversation($(this).attr("id"));
                });
            });
        }

        function LoadNotifications() {
            AjaxPost({ "user": "@userID" }, "@Url.Action("GetNotifications","Home")", function (e) {
                $("#Notifications").html(e);
                $(".notification").click(function () {
                    OpenNotification($(this).attr("id"));
                });
                if ($('#notificationCount').val() > 0) {
                    $('.tab-header-img').css('display', 'flex');
                    $('.tab-header-img').html($('#notificationCount').val());
                } else {
                    $('.tab-header-img').css('display', 'none');
                }
            });
        }

        LoadConversations();
        LoadNotifications();

        function AddUserToCoversation(conversation) {
            if (isModalOpen)
                return;
            isModalOpen = true;
            AjaxPost({ find: "", user: "@userID", conversation: $(conversation).attr("name") }, "@Url.Action("FindOnlyFriends")", function (e) {
                $(modalAddUserContent).html(e);
                $('.user-info.contact-find-add').click(function () {
                            var userID = $(this).attr("id");
                            AjaxPost({ user: "@userID", friend: userID, conversation: $(conversation).attr("name") }, "@Url.Action("AddUserToConversation", "Home")", function (e) {
                                toastr[e ? "success" : "error"]("Add " + (e ? "success" : "error"));
                                if (e) SendNotification(userID, 1);
                                $(modalAddUser).modal("hide");
                            });
                        });
                $(modalAddUser).modal("show");
                $('#search-input-add-conversation').keyup(function () {
                    var text = $(this).val().trim();
                    if (text.length === 0)
                        return;
                    AjaxPost({ find: text, user: "@userID", conversation: $(conversation).attr("name") }, "@Url.Action("FindOnlyFriends")", function (e) {
                        $(modalAddUserContent).html(e);
                        $('.user-info.contact-find-add').click(function () {
                            var userID = $(this).attr("id");
                            AjaxPost({ user: "@userID", friend: userID, conversation: $(conversation).attr("name") }, "@Url.Action("AddUserToConversation", "Home")", function (e) {
                                toastr[e ? "success" : "error"]("Add " + (e ? "success" : "error"));
                                if (e) SendNotification(userID, 1);
                                $(modalAddUser).modal("hide");
                            });
                        });
                    });
                });
            });
        }


        function OpenNotification(id) {
            AjaxPost({ "user": "@userID", "notification": id }, "@Url.Action("OpenNotification","Home")",
                function (e) {
                    $("#s-column").html(e);
                    $("#acceptFriend").click(function () {
                        var id = $(this).attr("name");
                        var creatorId = $('#notification-creatorID').val();
                        AjaxPost({ "user": "@userID", "notification": id }, "@Url.Action("AcceptFriend","Home")",
                            function (e) {
                                OpenConversation(e);
                                LoadNotifications();
                                LoadConversations();
                                SendNotification(creatorId, 0);
                            });
                    });
                    $("#declineFriend").click(function () {
                        var id = $(this).attr("name");
                        var creatorId = $('#notification-creatorID').val();
                        AjaxPost({ "user": "@userID", "notification": id }, "@Url.Action("DeclineFriend","Home")",
                            function (e) {
                                GetStartPage();
                                LoadNotifications();
                                SendNotification(creatorId, 0);
                            });
                    });
                });
        }

        // Searching conversations and friends
        $('#search-input').keyup(function () {
            var text = $(this).val().trim();
            if (text.length === 0) {
                LoadConversations();
            }
            else {
                AjaxPost({ "find": text, "user": "@userID" },
                    "@Url.Action("FindResult", "Home")",
                    function (e) {
                        $('#list-output').html(e);
                        $('.contact-find').click(function () { OpenContact($(this).attr("id")); });
                    });
            }
        });

        function OpenContact(id) {
            AjaxPost({ "user": "@userID", "another": id },
            "@Url.Action("OpenContact","Home")",
            function (e) {
                $('.s-column').html(e);
                InitOpenContact();
            });
        }

        function InitOpenContact() {
            $("#deleteFriend").click(function () {
            });
            $("#addFriend").click(function () {
                var nUser = $(this).attr("name");
                AjaxPost({ "user": "@userID", "newFriend": nUser },
                    "@Url.Action("AddFriend","Home")", function (e) {
                        if (!e)
                            toastr["error"]("Unreport exception");
                        else {
                            toastr["success"]("Success adding");
                            OpenContact(nUser);
                            SendNotification(nUser, 1);
                        }
                    });
            });
        }

        function LoadInfoAboutConversation(conversation, ignore = false) {
            if (isModalOpen && !ignore)
                return;
            var id = $(conversation).attr("id");
            AjaxPost({ "user": "@userID", "conversation": id }, "@Url.Action("ConversationInfo")",
                function (e) {
                    $(modalWindowContent).html(e);
                    $('.deleteFromConversation').click(function () {
                        var idUser = $(this).attr("id");
                        OpenChoiceModal(function () {
                            AjaxPost({ conversation: id, user: idUser }, "@Url.Action("DeleteUserFromConversation")", function (e) {
                                toastr[e ? "success" : "error"]("Deleting " + (e ? "success" : "error"));
                                LoadInfoAboutConversation(conversation, true);
                            });
                        }, true);
                    });

                    $('.setAdminUser').click(function () {
                        var idUser = $(this).attr('id');
                        OpenChoiceModal(function () {
                            AjaxPost({ conversation: id, user: idUser }, "@Url.Action("SetUserAdmin")", function (e) {
                                toastr[e ? "success" : "error"]("Set user " + (e ? "success" : "error"));
                                LoadInfoAboutConversation(conversation, true);
                            });
                        },true);
                    })
                    $(modalWindow).modal("show");
                    isModalOpen = true;
                });
        }

        function OpenConversation(id, isStartDialog = false) {
            AjaxPost({ "user": "@userID", "conversation": id }, "@Url.Action("OpenConversation", "Home")",
                function (e) {
                    openConvesation = id;
                    $("#s-column").html(e);
                    /// Realize

                    videoChatBlock = document.querySelector("#video-chat");
                    visionBlock = document.querySelector("#vision");

                    messageBox = $('#message-box');
                    $(messageBox).scrollTop($(messageBox).prop('scrollHeight'));

                    $(messageBox).on('scroll', function () {
                        if ($(this).scrollTop() == 0) {
                            var top = $('.message-box-message').first().attr('id');
                            AjaxPost({ conversation: $(this).attr('name'), first: top, user:"@userID" }, "@Url.Action("GetAddingsMsg", "Home")", function (e) {
                                var html = $(messageBox).html();
                                $(messageBox).html(e + html);
                            });
                        }
                    });

                    $(".header-info").click(function () {
                        LoadInfoAboutConversation(this);
                    });

                    $('#addUserToConversation').click(function () {
                        AddUserToCoversation(this);
                    });

                    $("#startCalling").click(function (event) {
                        activeDialogConversation = openConvesation;
                        event.stopPropagation();
                        SwitchMode();
                        SwitchVideo();
                        StartCalling();
                    });

                    $("#endCalling").click(function (event) {
                        event.stopPropagation();
                        SwitchMode();
                        SwitchVideo();
                        DeclineCalling(true);
                        StopStream();
                    });

                    $('#msg-input').keypress(function (e) {
                        if (e.keyCode === 13) {
                            var json = '{"type" : "messanger", "method": "sendMessage", "conversation":"'
                                + $(this).attr('name') + '",content:"' + $(this).val() + '"}';
                            socket.send(json);
                            $(this).val('');
                        }
                    });

                    $('#outFromConversation').click(function () {
                        var id = $(this).attr('name');
                        OpenChoiceModal(function () {
                            AjaxPost({ conversation: id, user: "@userID" }, "@Url.Action("DeleteUserFromConversation")", function (e) {
                                GetStartPage();
                                LoadConversations();
                            });
                        });
                    });     

                    if (isStartDialog || (isActiveDialog && activeDialogConversation.toString() === openConvesation.toString())) {
                        StopCalling();
                        SwitchMode();
                        isActiveDialog = true;
                        activeDialogConversation = openConvesation;
                        if (!isStartDialog)
                            StopStream();
                        StartStream();
                    }
                });
        }

        function OpenChoiceModal(successFunction, ignore = false) {
            if (isModalOpen && !ignore)
                return;
            isModalOpen = true;
            $(modalChoiceYes).click(function () {
                successFunction();
                $(modalChoice).modal('hide');
            });
            $(modalChoice).modal("show");
        }

        /// Переписать под универсал!
        $('.tab-header').click(function () {
            var getElementActive = $('.tab-header.tab-header-active').first();
            var idActive = $(getElementActive).attr("name");
            var id = $(this).attr("name");
            if (this !== getElementActive) {
                $(this).attr("class", "tab-header tab-header-active");
                $('#' + id).css("display", "block");
                $(getElementActive).attr("class", "tab-header");
                $('#' + idActive).css("display","none");
            }
        });

    });


    function AjaxPost(data, url, success) {
        $.ajax({
            url: url,
            data: data,
            method: "POST",
            success: success,
            error: function (jqXHR, textStatus, errorThrown) {
                toastr["error"](jqXHR.responseText);
            }
        });
    }

    function AjaxPostForm(data, url) {
        $.ajax({
            url: url,
            method: 'POST',
            data: data,
            cache: false,
            processData: false,
            contentType: false,
            error: function (jqXHR, textStatus, errorThrown) {
                toastr["error"](jqXHR.responseText);
            }
        });
    }

    function AjaxGet(data, url, success) {
        $.ajax({
            url: url,
            data: data,
            method: "GET",
            success: success,
            error: function (error) {

            }
        });
    }

</script>


